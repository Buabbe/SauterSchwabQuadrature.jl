{
    "docs": [
        {
            "location": "/", 
            "text": "SauterSchwabQuadrature.jl\n\n\nThis package can be used to solve problems of following type:\n\n\n\n\n\n\\int_{\\Gamma}\\int_{\\Gamma'}b_i(\\textbf{x})\\,k(\\textbf{x},\\textbf{y})\\, b_j(\\textbf{y})\\;da_\\textbf{y}\\,da_\\textbf{x}\n\n\n\n\n\nThe above expression is a double area-integral over two flat triangles $\\Gamma$ and $\\Gamma'$ in 3D Space. The integrand consists of two basisfunctions $b_i(\\textbf{x})$ and $b_i(\\textbf{y})$ and the kernel $k(\\textbf{x},\\textbf{y})$.   \n\n\nThis kind of integral often appears in the area of Boundary Element Method for solving elliptic partial differential equations, and can be interpretated as the interaction of the two basisfunctions with respect to their triangles. For this reason in this package the two triangles are called test- and sourcecell, and the same goes for the two basefunctions, they are called test- and sourcefunction. The triangles correspond to the cells of a meshed surface.\n\n\nAs the solving algorithm works for a wide range of basisfunctions and kernels, all the requirements for the kernel, basisfunctions and the integration areas will be given:\n\n\n1.Requirements for the triangles:\n\n\n\n\nThe triangles must be flat and are created by three vertices\n\n\nThe triangles must be either the same, have two vertices in common, have one vertex in common or do not touch at all; A partial overlap is forbidden\n\n\n\n\n2.Requirements for the basisfunctions:\n\n\n\n\nThe basisfunctions must be real and non singular on their respective triangles\n\n\nThe basisfunctions map vectors on scalars\n\n\n\n\n3.The kernel must be Cauchy-Singular\n\n\nAccording to item 1, four different constellations of the two triangles are possible:\n\n\n\n\nEqual triangles $\\to$ Common Face\n\n\nTwo vertices in common $\\to$ Common Edge\n\n\nOne vertex in commmon $\\to$ Common Vertex\n\n\nBoth triangles do not touch at all $\\to$ Positive Distance\n\n\n\n\nAs each of those four constellations has its own integration method (because of a possible singularity in the kernel), every single case will be presented. However, in all four cases the called function will look like:\n\n\nsauterschwabintegral(sourcechart, testchart, integrand, constellation)\n.\n\n\nsourcechart\n and \ntestchart\n are the mappings from a reference triangle (parametrisation) to the real triangles in space, they contain the information of the positions of both triangles. \nintegrand\n is the integrand and \nconstellation\n is a object of a particular type which conveys the function the method of integration and additional information of how accurate the integration shall be done.\n\n\nAs this package depends on the package 'CompScienceMeshes', it is useful to be familiar with that package, at least with the functions \nsimplex()\n and \npoint()\n.\n\n\nThis documentation does not derive the integration rules, and how the integration is done, it only shows how to handle this package. If the user wants to know more about how this package operates, he has to go inside the src folder and look up for the book in the README file.\n\n\n\n\nCommon Face\n\n\n$\\Gamma$ and $\\Gamma'$ are equal, hence \nsourcechart\n and \ntestchart\n are equal as well. The two charts can be created by\n\n\ntestchart = sourcechart = simplex(P1,P2,P3)\n\n\n, where \nP1\n, \nP2\n and \nP3\n are the vertices of that particular triangle. Note that both charts must be equal, that means that the first argument of both charts must be euqal, the second argument of both charts must be equal, and the last argument of both charts must be equal. For instance \nsourcechart = simplex(P1,P2,P3)\n and  \ntestchart = simplex(P1,P3,P2)\n will not work because of the different orders of the input arguments.\n\n\nThe \nintegrand\n must be defined as a function and its function name is the input argument.\n\n\nThe last argument can be created by\n\n\ncf = CommonFace(x)\n.\n\n\ncf\n is an object of type \nCommonFace()\n, x is an integer which stands for the degree of accuracy. The larger x is, the more accurate the evaluation will be.\n\n\nAn example of this case can be found and run in the example folder.\n\n\n\n\nCommon Edge\n\n\n\n\n\n\\Gamma\n\n\n\n\n\nand $\\Gamma'$ are now different, hence \nsourcechart\n and \ntestchart\n are different as well. The two charts have to be created in the following manner:\n\n\ntestchart = simplex(P1,P2,P3); sourcechart = simplex(P1,P4,P3)\n.\n\n\nAgain the order of the input arguments must be taken into account: The first argument of both charts must be equal, and the last argument of both charts must be equal. Consequently the first and the last argument are the vertices which both triangles have in common.\n\n\nThe \nintegrand\n must be defined as a function and its function name is the input argument.\n\n\nThe last argument can be created by\n\n\nce = CommonEdge(x)\n.\n\n\nce\n is an object of type \nCommonEdge()\n, x is an integer which stands for the degree of accuracy. The larger x is, the more accurate the evaluation will be.\n\n\nAn example of this case can be found and run in the example folder.\n\n\n\n\nCommon Vertex\n\n\nThe two triangles and charts are again different. The two charts have to be created in the following manner:\n\n\nsourcechart = simplex(P1,P2,P3); testchart = simplex(P1,P4,P5)\n.\n\n\nAgain the order of the input arguments must be taken into account: The first argument of both charts must be equal, the order of \nP2\n and \nP3\n with respect to \nsourcechart\n and the order of \nP4\n and \nP5\n with respect to \ntestchart\n does not matter.  Consequently, the first argument is the vertex both triangles have in common.\n\n\nThe \nintegrand\n must be defined as a function and its function name is the input argument.\n\n\nThe last argument can be created by\n\n\ncv = CommonVertex(x)\n.\n\n\ncv\n is an object of type \nCommonVertex()\n, x is an integer which stands for the degree of accuracy. The larger x is, the more accurate the evaluation will be.\n\n\nAn example of this case can be found and run in the example folder.\n\n\n\n\nPositive Distance\n\n\nAs the triangles do not touch at all, the integration becomes a simple quadrature. Therefore the order of arguments for the two \nsimplexfunction()\n's no longer matter.\n\n\nThe \nintegrand\n must be defined as a function and its function name is the input argument.\n\n\nThe last argument can be created by\n\n\npd = PositiveDistance(x)\n.\n\n\npd\n is an object of type \nPositiveDistance()\n, x is an integer which stands for the degree of accuracy. The larger x is, the more accurate the evaluation will be.\n\n\nAn example of this case can be found and run in the example folder.", 
            "title": "Home"
        }, 
        {
            "location": "/#sauterschwabquadraturejl", 
            "text": "This package can be used to solve problems of following type:   \n\\int_{\\Gamma}\\int_{\\Gamma'}b_i(\\textbf{x})\\,k(\\textbf{x},\\textbf{y})\\, b_j(\\textbf{y})\\;da_\\textbf{y}\\,da_\\textbf{x}   The above expression is a double area-integral over two flat triangles $\\Gamma$ and $\\Gamma'$ in 3D Space. The integrand consists of two basisfunctions $b_i(\\textbf{x})$ and $b_i(\\textbf{y})$ and the kernel $k(\\textbf{x},\\textbf{y})$.     This kind of integral often appears in the area of Boundary Element Method for solving elliptic partial differential equations, and can be interpretated as the interaction of the two basisfunctions with respect to their triangles. For this reason in this package the two triangles are called test- and sourcecell, and the same goes for the two basefunctions, they are called test- and sourcefunction. The triangles correspond to the cells of a meshed surface.  As the solving algorithm works for a wide range of basisfunctions and kernels, all the requirements for the kernel, basisfunctions and the integration areas will be given:  1.Requirements for the triangles:   The triangles must be flat and are created by three vertices  The triangles must be either the same, have two vertices in common, have one vertex in common or do not touch at all; A partial overlap is forbidden   2.Requirements for the basisfunctions:   The basisfunctions must be real and non singular on their respective triangles  The basisfunctions map vectors on scalars   3.The kernel must be Cauchy-Singular  According to item 1, four different constellations of the two triangles are possible:   Equal triangles $\\to$ Common Face  Two vertices in common $\\to$ Common Edge  One vertex in commmon $\\to$ Common Vertex  Both triangles do not touch at all $\\to$ Positive Distance   As each of those four constellations has its own integration method (because of a possible singularity in the kernel), every single case will be presented. However, in all four cases the called function will look like:  sauterschwabintegral(sourcechart, testchart, integrand, constellation) .  sourcechart  and  testchart  are the mappings from a reference triangle (parametrisation) to the real triangles in space, they contain the information of the positions of both triangles.  integrand  is the integrand and  constellation  is a object of a particular type which conveys the function the method of integration and additional information of how accurate the integration shall be done.  As this package depends on the package 'CompScienceMeshes', it is useful to be familiar with that package, at least with the functions  simplex()  and  point() .  This documentation does not derive the integration rules, and how the integration is done, it only shows how to handle this package. If the user wants to know more about how this package operates, he has to go inside the src folder and look up for the book in the README file.", 
            "title": "SauterSchwabQuadrature.jl"
        }, 
        {
            "location": "/#common-face", 
            "text": "$\\Gamma$ and $\\Gamma'$ are equal, hence  sourcechart  and  testchart  are equal as well. The two charts can be created by  testchart = sourcechart = simplex(P1,P2,P3)  , where  P1 ,  P2  and  P3  are the vertices of that particular triangle. Note that both charts must be equal, that means that the first argument of both charts must be euqal, the second argument of both charts must be equal, and the last argument of both charts must be equal. For instance  sourcechart = simplex(P1,P2,P3)  and   testchart = simplex(P1,P3,P2)  will not work because of the different orders of the input arguments.  The  integrand  must be defined as a function and its function name is the input argument.  The last argument can be created by  cf = CommonFace(x) .  cf  is an object of type  CommonFace() , x is an integer which stands for the degree of accuracy. The larger x is, the more accurate the evaluation will be.  An example of this case can be found and run in the example folder.", 
            "title": "Common Face"
        }, 
        {
            "location": "/#common-edge", 
            "text": "\\Gamma   and $\\Gamma'$ are now different, hence  sourcechart  and  testchart  are different as well. The two charts have to be created in the following manner:  testchart = simplex(P1,P2,P3); sourcechart = simplex(P1,P4,P3) .  Again the order of the input arguments must be taken into account: The first argument of both charts must be equal, and the last argument of both charts must be equal. Consequently the first and the last argument are the vertices which both triangles have in common.  The  integrand  must be defined as a function and its function name is the input argument.  The last argument can be created by  ce = CommonEdge(x) .  ce  is an object of type  CommonEdge() , x is an integer which stands for the degree of accuracy. The larger x is, the more accurate the evaluation will be.  An example of this case can be found and run in the example folder.", 
            "title": "Common Edge"
        }, 
        {
            "location": "/#common-vertex", 
            "text": "The two triangles and charts are again different. The two charts have to be created in the following manner:  sourcechart = simplex(P1,P2,P3); testchart = simplex(P1,P4,P5) .  Again the order of the input arguments must be taken into account: The first argument of both charts must be equal, the order of  P2  and  P3  with respect to  sourcechart  and the order of  P4  and  P5  with respect to  testchart  does not matter.  Consequently, the first argument is the vertex both triangles have in common.  The  integrand  must be defined as a function and its function name is the input argument.  The last argument can be created by  cv = CommonVertex(x) .  cv  is an object of type  CommonVertex() , x is an integer which stands for the degree of accuracy. The larger x is, the more accurate the evaluation will be.  An example of this case can be found and run in the example folder.", 
            "title": "Common Vertex"
        }, 
        {
            "location": "/#positive-distance", 
            "text": "As the triangles do not touch at all, the integration becomes a simple quadrature. Therefore the order of arguments for the two  simplexfunction() 's no longer matter.  The  integrand  must be defined as a function and its function name is the input argument.  The last argument can be created by  pd = PositiveDistance(x) .  pd  is an object of type  PositiveDistance() , x is an integer which stands for the degree of accuracy. The larger x is, the more accurate the evaluation will be.  An example of this case can be found and run in the example folder.", 
            "title": "Positive Distance"
        }
    ]
}